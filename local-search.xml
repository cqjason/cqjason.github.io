<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test2</title>
    <link href="/2025/09/12/test2/"/>
    <url>/2025/09/12/test2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test1</title>
    <link href="/2025/09/12/test1/"/>
    <url>/2025/09/12/test1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2025/09/12/test/"/>
    <url>/2025/09/12/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Collection</title>
    <link href="/post/data-structures/collection/"/>
    <url>/post/data-structures/collection/</url>
    
    <content type="html"><![CDATA[<h1 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h1><p>Iterable</p><ul><li><p>iterator(): Iterator<T></p></li><li><p>forEach(Consumer&lt;? super T&gt; action): void</p></li><li><p>spliterator(): Spliterator<T></p></li></ul><h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p>Iterator</p><ul><li><p>hasNext(): boolean</p></li><li><p>next(): E</p></li><li><p>remove(): void</p></li><li><p>forEachRemaining(Consumer&lt;? super E&gt; action): void</p></li></ul><h1 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h1><p>ListIterator<E> extends Iterator<E></p><ul><li>set(E e): void</li><li>add(E e): void </li><li>hasPrevious(): boolean</li><li>previos(): E</li><li>nextIndex(): int</li><li>previousIndex(): int</li></ul><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>Collection<E> extends Iterable<E></p><pre><code class="hljs">+ size(): int+ isEmpty(): boolean+ add(Object o): boolean+ remove(Object o): boolean+ toArray(): Object[]</code></pre><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><p><img src="/./images/image-20210329163711987.png"></p><h2 id="重要结构"><a href="#重要结构" class="headerlink" title="重要结构"></a>重要结构</h2><ul><li><p>Itr implements Iterator<E></p></li><li><p>ListItr extends Itr implements ListIterator<E></p></li><li><p>SubList extends AbstractList<E> implements RandomAccess</p></li><li><p>ArrayListSpliterator<E> implements Spliterator<E></p></li><li><p>field</p><ul><li>transient Object[] elementData;</li><li>private int size;</li></ul></li><li><p>function</p><ul><li><pre><code class="language-java">private void grow(int minCapacity) &#123;    // overflow-conscious code    int oldCapacity = elementData.length;    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);    if (newCapacity - minCapacity &lt; 0)        newCapacity = minCapacity;    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)        newCapacity = hugeCapacity(minCapacity);    // minCapacity is usually close to size, so this is a win:    elementData = Arrays.copyOf(elementData, newCapacity);&#125;<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>+ ```java<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span>(<span class="hljs-built_in">Object</span> o) &#123;<br>      <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">size</span>; i++)<br>              <span class="hljs-keyword">if</span> (elementData[i]==<span class="hljs-literal">null</span>)<br>                  <span class="hljs-keyword">return</span> i;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">size</span>; i++)<br>              <span class="hljs-keyword">if</span> (o.<span class="hljs-property">equals</span>(elementData[i]))<br>                  <span class="hljs-keyword">return</span> i;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-java">public boolean remove(Object o) &#123;    if (o == null) &#123;        for (int index = 0; index &lt; size; index++)            if (elementData[index] == null) &#123;                fastRemove(index);                return true;            &#125;    &#125; else &#123;        for (int index = 0; index &lt; size; index++)            if (o.equals(elementData[index])) &#123;                fastRemove(index);                return true;            &#125;    &#125;    return false;&#125;private void fastRemove(int index) &#123;        modCount++;        int numMoved = size - index - 1;        if (numMoved &gt; 0)            System.arraycopy(elementData, index+1, elementData, index,                             numMoved);        elementData[--size] = null; // clear to let GC do its work    &#125;<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br><span class="hljs-comment"># Queue</span><br><br>Queue<span class="hljs-tag">&lt;E&gt;</span> extends Collection<span class="hljs-tag">&lt;E&gt;</span><br><br>+ add(E):   <span class="hljs-literal">true</span> <span class="hljs-keyword">or</span> Exception: (as specified by &#123;@link Collection<span class="hljs-comment">#add&#125;), @throws IllegalStateException if the element cannot be added at this  time due to insertion restrictions</span><br><br>+ offer(E):   &#123;@code <span class="hljs-literal">true</span>&#125; if the element was added to this queue, else  &#123;@code <span class="hljs-literal">false</span>&#125;<br>+ remove(): E <span class="hljs-keyword">or</span> NoSuchElementException<br>+ poll(): E<br>+ element(): E <span class="hljs-keyword">or</span> NoSuchElementException<br>+ peek(): E<br><br><span class="hljs-comment"># LinkedList</span><br><br><span class="hljs-comment">## 继承关系</span><br><br>![image-<span class="hljs-number">20210330153448504</span>](../../images/image-<span class="hljs-number">20210330153448504</span>.png)<br><br><span class="hljs-comment">## 重要结构</span><br><br>+ ListItr implements ListIterator<span class="hljs-tag">&lt;E&gt;</span><br>+ class <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt;<br>+ LLSpliterator<span class="hljs-tag">&lt;E&gt;</span> implements Spliterator<span class="hljs-tag">&lt;E&gt;</span><br><br>+ field<br><br>  + transient int size = <span class="hljs-number">0</span>;<br>  + transient <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; first;<br>  + transient <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; last;<br><br>+ function<br><br>  + ```java<br>    private void linkFirst(E e) &#123;<br>        final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; f = first;<br>        final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; newNode = new <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;&gt;(null</span>, e, f);<br>        first = newNode;<br>        if (f == null)<br>            last = newNode;<br>        else<br>            f.prev = newNode;<br>        size++;<br>        modCount++;<br>    &#125;<br>    <br>    void linkLast(E e) &#123;<br>            final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; l = last;<br>            final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; newNode = new <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;&gt;(l</span>, e, null);<br>            last = newNode;<br>            if (l == null)<br>                first = newNode;<br>            else<br>                l.next = newNode;<br>            size++;<br>            modCount++;<br>    &#125;<br>    <br>     void linkBefore(E e, <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; succ) &#123;<br>            // assert succ != null;<br>            final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; pred = succ.prev;<br>            final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; newNode = new <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;&gt;(pred</span>, e, succ);<br>            succ.prev = newNode;<br>            if (pred == null)<br>                first = newNode;<br>            else<br>                pred.next = newNode;<br>            size++;<br>            modCount++;<br>    &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-java">private E unlinkFirst(Node&lt;E&gt; f) &#123;    // assert f == first &amp;&amp; f != null;    final E element = f.item;    final Node&lt;E&gt; next = f.next;    f.item = null;    f.next = null; // help GC    first = next;    if (next == null)        last = null;    else        next.prev = null;    size--;    modCount++;    return element;&#125;private E unlinkLast(Node&lt;E&gt; l) &#123;    // assert l == last &amp;&amp; l != null;    final E element = l.item;    final Node&lt;E&gt; prev = l.prev;    l.item = null;    l.prev = null; // help GC    last = prev;    if (prev == null)        first = null;    else        prev.next = null;    size--;    modCount++;    return element;&#125;E unlink(Node&lt;E&gt; x) &#123;    // assert x != null;    final E element = x.item;    final Node&lt;E&gt; next = x.next;    final Node&lt;E&gt; prev = x.prev;    if (prev == null) &#123;        first = next;    &#125; else &#123;        prev.next = next;        x.prev = null;    &#125;    if (next == null) &#123;        last = prev;    &#125; else &#123;        next.prev = prev;        x.next = null;    &#125;    x.item = null;    size--;    modCount++;    return element;&#125;<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>+ ```java<br>  Node&lt;E&gt; node(<span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span>) &#123;<br>      <span class="hljs-comment">// assert isElementIndex(index);</span><br>  <br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">index</span> &lt; (size &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>          Node&lt;E&gt; x = first;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">index</span>; i++)<br>              x = x.<span class="hljs-keyword">next</span>;<br>          <span class="hljs-keyword">return</span> x;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          Node&lt;E&gt; x = last;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = size - <span class="hljs-number">1</span>; i &gt; <span class="hljs-keyword">index</span>; i--)<br>              x = x.prev;<br>          <span class="hljs-keyword">return</span> x;<br>      &#125;<br>  &#125;<br>  <br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> indexOf(Object o) &#123;<br>          <span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>              <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.<span class="hljs-keyword">next</span>) &#123;<br>                  <span class="hljs-keyword">if</span> (x.item == <span class="hljs-literal">null</span>)<br>                      <span class="hljs-keyword">return</span> <span class="hljs-keyword">index</span>;<br>                  <span class="hljs-keyword">index</span>++;<br>              &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="hljs-literal">null</span>; x = x.<span class="hljs-keyword">next</span>) &#123;<br>                  <span class="hljs-keyword">if</span> (o.equals(x.item))<br>                      <span class="hljs-keyword">return</span> <span class="hljs-keyword">index</span>;<br>                  <span class="hljs-keyword">index</span>++;<br>              &#125;<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2025/09/08/about/me/"/>
    <url>/2025/09/08/about/me/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Map</title>
    <link href="/post/data-structures/map/"/>
    <url>/post/data-structures/map/</url>
    
    <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul><li>size(): int</li><li>isEmpty():boolean</li><li>containsKey(object): boolean</li><li>containsVaule: boolean</li><li>get(Object): V</li><li>put(K,V): V</li><li>remove(Object): V</li><li>keySet(): Set<K></li><li>vaules(): Conllection<V></li><li>entrySet(): Set&lt;Entry&lt;K,V&gt;&gt;</li></ul><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>重要结构：</p><ul><li><p>Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</p></li><li><p>HashIterator</p></li><li><p>HashMapSpliterator&lt;K,V&gt; </p></li><li><p>TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt;</p></li><li><p>field</p><ul><li>transient Node&lt;K,V&gt;[] table; transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;  transient Set<K>  keySet; transient Collection<V> values;</li><li>transient int size;   transient int modCount</li><li>int threshold;  final float loadFactor;</li></ul></li><li><p>function</p><ul><li><pre><code class="language-java">public boolean containsValue(Object value) &#123;    Node&lt;K,V&gt;[] tab; V v;    if ((tab = table) != null &amp;&amp; size &gt; 0) &#123;        for (int i = 0; i &lt; tab.length; ++i) &#123;            for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) &#123;                if ((v = e.value) == value ||                    (value != null &amp;&amp; value.equals(v)))                    return true;            &#125;        &#125;    &#125;    return false;&#125;<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><br>+ ```java<br>  final V <span class="hljs-built_in">putVal</span>(int hash, K <span class="hljs-built_in">key</span>, V value, boolean onlyIfAbsent,<br>                 boolean evict) &#123;<br>      Node&lt;K,V&gt;[] <span class="hljs-built_in">tab</span>; Node&lt;K,V&gt; p; int n, i;<br>      <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-built_in">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>          n = (tab = <span class="hljs-built_in">resize</span>()).length;<br>      <span class="hljs-keyword">if</span> ((p = <span class="hljs-built_in">tab</span>[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-built_in">null</span>)<br>          <span class="hljs-built_in">tab</span>[i] = <span class="hljs-built_in">newNode</span>(hash, <span class="hljs-built_in">key</span>, value, <span class="hljs-built_in">null</span>);<br>      <span class="hljs-keyword">else</span> &#123;<br>          Node&lt;K,V&gt; e; K k;<br>          <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>              ((k = p.key) == <span class="hljs-built_in">key</span> || (<span class="hljs-built_in">key</span> != <span class="hljs-built_in">null</span> &amp;&amp; key.equals(k))))<br>              e = p;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p instanceof TreeNode)<br>              e = ((TreeNode&lt;K,V&gt;)p).<span class="hljs-built_in">putTreeVal</span>(this, <span class="hljs-built_in">tab</span>, hash, <span class="hljs-built_in">key</span>, value);<br>          <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">for</span> (int binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                  if ((e = p.next) == <span class="hljs-built_in">null</span>) &#123;<br>                      p.next = newNode(hash, <span class="hljs-built_in">key</span>, value, <span class="hljs-built_in">null</span>);<br>                      <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                          <span class="hljs-built_in">treeifyBin</span>(<span class="hljs-built_in">tab</span>, hash);<br>                      <span class="hljs-keyword">break</span>;<br>                  &#125;<br>                  <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                      ((k = e.key) == <span class="hljs-built_in">key</span> || (<span class="hljs-built_in">key</span> != <span class="hljs-built_in">null</span> &amp;&amp; key.equals(k))))<br>                      <span class="hljs-keyword">break</span>;<br>                  p = e;<br>              &#125;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (e != <span class="hljs-built_in">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>              V oldValue = e.value;<br>              <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-built_in">null</span>)<br>                  e.value = value;<br>              <span class="hljs-built_in">afterNodeAccess</span>(e);<br>              <span class="hljs-keyword">return</span> oldValue;<br>          &#125;<br>      &#125;<br>      ++modCount;<br>      <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>          <span class="hljs-built_in">resize</span>();<br>      <span class="hljs-built_in">afterNodeInsertion</span>(evict);<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-java">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;        (first = tab[(n - 1) &amp; hash]) != null) &#123;        if (first.hash == hash &amp;&amp; // always check first node            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))            return first;        if ((e = first.next) != null) &#123;            if (first instanceof TreeNode)                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);            do &#123;                if (e.hash == hash &amp;&amp;                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))                    return e;            &#125; while ((e = e.next) != null);        &#125;    &#125;    return null;&#125;<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br>+ ```java<br>  final <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;K</span>,V&gt; removeNode(int hash, Object key, Object value,<br>                             boolean matchValue, boolean movable) &#123;<br>      <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;K</span>,V&gt;[] tab; <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;K</span>,V&gt; p; int n, index;<br>      if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>          (p = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != null) &#123;<br>          <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;K</span>,V&gt; <span class="hljs-keyword">node</span> <span class="hljs-title">= null</span>, e; K k; V v;<br>          if (p.hash == hash &amp;&amp;<br>              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))<br>              <span class="hljs-keyword">node</span> <span class="hljs-title">= p</span>;<br>          else if ((e = p.next) != null) &#123;<br>              if (p instanceof TreeNode)<br>                  <span class="hljs-keyword">node</span> <span class="hljs-title">= ((TreeNode</span><span class="hljs-tag">&lt;K,V&gt;</span>)p).getTreeNode(hash, key);<br>              else &#123;<br>                  do &#123;<br>                      if (e.hash == hash &amp;&amp;<br>                          ((k = e.key) == key ||<br>                           (key != null &amp;&amp; key.equals(k)))) &#123;<br>                          <span class="hljs-keyword">node</span> <span class="hljs-title">= e</span>;<br>                          break;<br>                      &#125;<br>                      p = e;<br>                  &#125; while ((e = e.next) != null);<br>              &#125;<br>          &#125;<br>          if (<span class="hljs-keyword">node</span> <span class="hljs-title">!= null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||<br>                               (value != null &amp;&amp; value.equals(v)))) &#123;<br>              if (<span class="hljs-keyword">node</span> <span class="hljs-title">instanceof</span> TreeNode)<br>                  ((TreeNode<span class="hljs-tag">&lt;K,V&gt;</span>)<span class="hljs-keyword">node</span><span class="hljs-title">).removeTreeNode</span>(this, tab, movable);<br>              else if (<span class="hljs-keyword">node</span> <span class="hljs-title">== p</span>)<br>                  tab[index] = node.next;<br>              else<br>                  p.next = node.next;<br>              ++modCount;<br>              --size;<br>              afterNodeRemoval(<span class="hljs-keyword">node</span><span class="hljs-title">);</span><br><span class="hljs-title">              return</span> <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">          &#125;</span><br><span class="hljs-title">      &#125;</span><br><span class="hljs-title">      return</span> null;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/09/05/hello-world/"/>
    <url>/2025/09/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
